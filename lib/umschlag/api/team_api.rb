=begin
#Umschlag OpenAPI

#API definition for Umschlag

The version of the OpenAPI document: 1.0.0-alpha1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0

=end

require 'uri'

module Umschlag
  class TeamApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assign a user to team
    # @param team_id [String] A team UUID or slug
    # @param team_user [TeamUserParams] The team user data to assign
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def append_team_to_user(team_id, team_user, opts = {})
      data, _status_code, _headers = append_team_to_user_with_http_info(team_id, team_user, opts)
      data
    end

    # Assign a user to team
    # @param team_id [String] A team UUID or slug
    # @param team_user [TeamUserParams] The team user data to assign
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def append_team_to_user_with_http_info(team_id, team_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamApi.append_team_to_user ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamApi.append_team_to_user"
      end
      # verify the required parameter 'team_user' is set
      if @api_client.config.client_side_validation && team_user.nil?
        fail ArgumentError, "Missing the required parameter 'team_user' when calling TeamApi.append_team_to_user"
      end
      # resource path
      local_var_path = '/teams/{team_id}/users'.sub('{' + 'team_id' + '}', team_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(team_user) 

      # return_type
      return_type = opts[:return_type] || 'GeneralError' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamApi#append_team_to_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new team
    # @param team [Team] The team data to create
    # @param [Hash] opts the optional parameters
    # @return [Team]
    def create_team(team, opts = {})
      data, _status_code, _headers = create_team_with_http_info(team, opts)
      data
    end

    # Create a new team
    # @param team [Team] The team data to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(Team, Integer, Hash)>] Team data, response status code and response headers
    def create_team_with_http_info(team, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamApi.create_team ...'
      end
      # verify the required parameter 'team' is set
      if @api_client.config.client_side_validation && team.nil?
        fail ArgumentError, "Missing the required parameter 'team' when calling TeamApi.create_team"
      end
      # resource path
      local_var_path = '/teams'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(team) 

      # return_type
      return_type = opts[:return_type] || 'Team' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamApi#create_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific team
    # @param team_id [String] A team UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def delete_team(team_id, opts = {})
      data, _status_code, _headers = delete_team_with_http_info(team_id, opts)
      data
    end

    # Delete a specific team
    # @param team_id [String] A team UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def delete_team_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamApi.delete_team ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamApi.delete_team"
      end
      # resource path
      local_var_path = '/teams/{team_id}'.sub('{' + 'team_id' + '}', team_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GeneralError' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamApi#delete_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a user from team
    # @param team_id [String] A team UUID or slug
    # @param team_user [TeamUserParams] The team user data to delete
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def delte_team_from_user(team_id, team_user, opts = {})
      data, _status_code, _headers = delte_team_from_user_with_http_info(team_id, team_user, opts)
      data
    end

    # Remove a user from team
    # @param team_id [String] A team UUID or slug
    # @param team_user [TeamUserParams] The team user data to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def delte_team_from_user_with_http_info(team_id, team_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamApi.delte_team_from_user ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamApi.delte_team_from_user"
      end
      # verify the required parameter 'team_user' is set
      if @api_client.config.client_side_validation && team_user.nil?
        fail ArgumentError, "Missing the required parameter 'team_user' when calling TeamApi.delte_team_from_user"
      end
      # resource path
      local_var_path = '/teams/{team_id}/users'.sub('{' + 'team_id' + '}', team_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(team_user) 

      # return_type
      return_type = opts[:return_type] || 'GeneralError' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamApi#delte_team_from_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch all users assigned to team
    # @param team_id [String] A team UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<TeamUser>]
    def list_team_users(team_id, opts = {})
      data, _status_code, _headers = list_team_users_with_http_info(team_id, opts)
      data
    end

    # Fetch all users assigned to team
    # @param team_id [String] A team UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TeamUser>, Integer, Hash)>] Array<TeamUser> data, response status code and response headers
    def list_team_users_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamApi.list_team_users ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamApi.list_team_users"
      end
      # resource path
      local_var_path = '/teams/{team_id}/users'.sub('{' + 'team_id' + '}', team_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<TeamUser>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamApi#list_team_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch all available teams
    # @param [Hash] opts the optional parameters
    # @return [Array<Team>]
    def list_teams(opts = {})
      data, _status_code, _headers = list_teams_with_http_info(opts)
      data
    end

    # Fetch all available teams
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Team>, Integer, Hash)>] Array<Team> data, response status code and response headers
    def list_teams_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamApi.list_teams ...'
      end
      # resource path
      local_var_path = '/teams'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Team>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamApi#list_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user perms for team
    # @param team_id [String] A team UUID or slug
    # @param team_user [TeamUserParams] The team user data to update
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def permit_team_user(team_id, team_user, opts = {})
      data, _status_code, _headers = permit_team_user_with_http_info(team_id, team_user, opts)
      data
    end

    # Update user perms for team
    # @param team_id [String] A team UUID or slug
    # @param team_user [TeamUserParams] The team user data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def permit_team_user_with_http_info(team_id, team_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamApi.permit_team_user ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamApi.permit_team_user"
      end
      # verify the required parameter 'team_user' is set
      if @api_client.config.client_side_validation && team_user.nil?
        fail ArgumentError, "Missing the required parameter 'team_user' when calling TeamApi.permit_team_user"
      end
      # resource path
      local_var_path = '/teams/{team_id}/users'.sub('{' + 'team_id' + '}', team_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(team_user) 

      # return_type
      return_type = opts[:return_type] || 'GeneralError' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamApi#permit_team_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch a specific team
    # @param team_id [String] A team UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Team]
    def show_team(team_id, opts = {})
      data, _status_code, _headers = show_team_with_http_info(team_id, opts)
      data
    end

    # Fetch a specific team
    # @param team_id [String] A team UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Team, Integer, Hash)>] Team data, response status code and response headers
    def show_team_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamApi.show_team ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamApi.show_team"
      end
      # resource path
      local_var_path = '/teams/{team_id}'.sub('{' + 'team_id' + '}', team_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Team' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamApi#show_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a specific team
    # @param team_id [String] A team UUID or slug
    # @param team [Team] The team data to update
    # @param [Hash] opts the optional parameters
    # @return [Team]
    def update_team(team_id, team, opts = {})
      data, _status_code, _headers = update_team_with_http_info(team_id, team, opts)
      data
    end

    # Update a specific team
    # @param team_id [String] A team UUID or slug
    # @param team [Team] The team data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Team, Integer, Hash)>] Team data, response status code and response headers
    def update_team_with_http_info(team_id, team, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamApi.update_team ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamApi.update_team"
      end
      # verify the required parameter 'team' is set
      if @api_client.config.client_side_validation && team.nil?
        fail ArgumentError, "Missing the required parameter 'team' when calling TeamApi.update_team"
      end
      # resource path
      local_var_path = '/teams/{team_id}'.sub('{' + 'team_id' + '}', team_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(team) 

      # return_type
      return_type = opts[:return_type] || 'Team' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamApi#update_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
